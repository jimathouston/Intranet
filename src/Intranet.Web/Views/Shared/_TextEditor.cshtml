@inject Microsoft.Extensions.Options.IOptions<Intranet.Web.Models.Options.TinyMceOptions> settings

@model TextEditorViewModel

<script src= @(String.Format("https://cloud.tinymce.com/stable/tinymce.min.js?apiKey={0}", settings.Value.ApiKey ))></script>
<script>
    tinymce.init({
        selector: '#' + '@Model.Id',
        height: @Model.Height || 250,
        inline: @Model.Inline.ToString().ToLower(),
        plugins: ['link', 'table', 'lists', 'image', 'imagetools', 'wordcount'],
        toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | media | codesample help',
        menubar: false,
        images_upload_url: '/upload',
        relative_urls: false,
        automatic_uploads: true,
        file_browser_callback_types: 'image',
        file_picker_types: 'image',
        file_picker_callback: function (cb, value, meta) {
            var input = document.createElement('input')
            input.setAttribute('type', 'file')
            input.setAttribute('accept', 'image/*')

            // Note: In modern browsers input[type="file"] is functional without
            // even adding it to the DOM, but that might not be the case in some older
            // or quirky browsers like IE, so you might want to add it to the DOM
            // just in case, and visually hide it. And do not forget do remove it
            // once you do not need it anymore.

            input.onchange = function () {
                var file = this['files'][0]

                var reader = new FileReader()
                reader.readAsDataURL(file)
                reader.onload = function () {
                    // Note: Now we need to register the blob in TinyMCEs image blob
                    // registry. In the next release this part hopefully won't be
                    // necessary, as we are looking to handle it internally.
                    var id = 'blobid' + (new Date()).getTime()
                    var blobCache = tinymce.activeEditor.editorUpload.blobCache
                    var base64 = reader.result.split(',')[1]
                    var blobInfo = blobCache.create(id, file, base64)
                    blobCache.add(blobInfo)

                    // call the callback and populate the Title field with the file name
                    cb(blobInfo.blobUri(), { title: file.name })
                }
            }

            input.click()
        },
        skin_url: '/assets/css/tinymce/skins/lightgray', // Skins is in the Assets folder
        setup: editor => {
            editor.on('keyup change undo redo', () => {
                document.getElementById('@Model.Id').value = editor.getContent()
            })
        },
    })
</script>